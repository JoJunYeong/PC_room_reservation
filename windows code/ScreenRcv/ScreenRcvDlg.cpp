
// ScreenRcvDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "ScreenRcv.h"
#include "ScreenRcvDlg.h"
#include "afxdialogex.h"

#include "Defines.h"
#include "ServerSocket.h"
#include "SocketThread.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

	// 대화 상자 데이터입니다.
	enum { IDD = IDD_ABOUTBOX };

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

	// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CScreenRcvDlg 대화 상자

CScreenRcvDlg::CScreenRcvDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CScreenRcvDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);

	m_pServerSocket = NULL;			// 서버 소켓 객체 NULL로 초기화
}

void CScreenRcvDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_BTN_START, m_btnStart);
	DDX_Control(pDX, IDC_BTN_STOP, m_btnStop);
	DDX_Control(pDX, IDC_LIST_LOG, m_lstLog);
}

BEGIN_MESSAGE_MAP(CScreenRcvDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BTN_START, &CScreenRcvDlg::OnBnClickedBtnStart)
	ON_BN_CLICKED(IDC_BTN_STOP, &CScreenRcvDlg::OnBnClickedBtnStop)
	ON_MESSAGE(WM_UPDATE_LOG, OnUpdateLog)
	ON_MESSAGE(WM_CLIENT_CLOSED, OnClientClosed)
END_MESSAGE_MAP()


// CScreenRcvDlg 메시지 처리기

BOOL CScreenRcvDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다. 응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// 버튼 설정
	m_btnStart.EnableWindow(TRUE);
	m_btnStop.EnableWindow(FALSE);
	m_lstLog.ResetContent();

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CScreenRcvDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다. 문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CScreenRcvDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CScreenRcvDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

BOOL CScreenRcvDlg::PreTranslateMessage(MSG* pMsg)
{
	//ALT + F4 방지
	if(pMsg->message == WM_SYSKEYDOWN)
	{
		if(pMsg->wParam == VK_F4)
			return TRUE;
	}

	if(pMsg->message == WM_KEYDOWN)
	{
		if(pMsg->wParam == VK_ESCAPE  || 
			pMsg->wParam == VK_RETURN ||
			pMsg->wParam == VK_SPACE  ||
			pMsg->wParam == VK_CANCEL)       //CTRL + PAUSE 방지
			return TRUE;        
	}

	return CDialogEx::PreTranslateMessage(pMsg);
}

// 서버 시작
void CScreenRcvDlg::OnBnClickedBtnStart()
{
	if (m_pServerSocket == NULL)
	{
		// 소켓 초기화
		if (!AfxSocketInit())
		{
			AfxMessageBox("소켓 초기화 실패!");
			return;
		}
		else 
		{
			// 서버 소켓 객체 초기화
			m_pServerSocket = new CServerSocket();
			m_pServerSocket->m_pWnd = this;

			// 서버 소켓 생성
			if (!m_pServerSocket->Create(SERVER_PORT))
			{
				AfxMessageBox("서버 소켓 생성 실패!");
				m_pServerSocket = NULL;
				return;
			}

			// 서버 리슨 생성
			if (!m_pServerSocket->Listen()) 
			{
				AfxMessageBox("서버 소켓 접속대기 준비 실패!");
				m_pServerSocket = NULL;
				return;
			}

			// 버튼 설정
			m_btnStart.EnableWindow(FALSE);
			m_btnStop.EnableWindow(TRUE);
			m_lstLog.ResetContent();

			// 로그 
			m_lstLog.AddString("서버 초기화 완료 및 접속 클라이언트 접속 대기.");
		}
	}
}

// 서버 종료
void CScreenRcvDlg::OnBnClickedBtnStop()
{
	// 서버 소켓이 존재하면
	if (m_pServerSocket != NULL)
	{
		if (m_pServerSocket->m_thClient != NULL)
		{
			m_pServerSocket->m_thClient->SuspendThread();
			m_pServerSocket->m_thClient->ExitInstance();
			m_pServerSocket->m_thClient->m_hThread = NULL;
		}
		// 서버 소켓 강제종료
		m_pServerSocket->Close();
		m_pServerSocket = NULL;

		// 버튼 설정
		m_btnStart.EnableWindow(TRUE);
		m_btnStop.EnableWindow(FALSE);
	}
}


// 메시지 함수 : 데이터송신
LONG CScreenRcvDlg::OnUpdateLog(UINT wParam, LONG lParam)
{
	// 넘겨받은 문자열을 받아서
	CString *tmp = (CString *)wParam;

	CString msg;
	msg.Format("%s", *tmp);

	// 리스트 박스에 추가하고
	m_lstLog.AddString(msg);

	// 리스트 박스의 마지막 업데이트 위치로 스크롤
	m_lstLog.SetTopIndex((m_lstLog.GetCount() > 0 ? m_lstLog.GetCount() : 1) - 1);

	return 0;
}

// 메시지 함수 : 클라이언트 종료
LONG CScreenRcvDlg::OnClientClosed(UINT wParam, LONG lParam)
{
	if (m_pServerSocket->m_thClient != NULL)
	{
		m_pServerSocket->m_thClient->SuspendThread();
		m_pServerSocket->m_thClient->ExitInstance();
		m_pServerSocket->m_thClient->m_hThread = NULL;
	}

	return 0;
}
